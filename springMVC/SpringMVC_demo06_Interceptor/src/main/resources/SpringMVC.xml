<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">
    <!-- 开启注解扫描   -->
    <context:component-scan base-package="com.zhou"></context:component-scan>

    <!--配置拦截器-->
    <mvc:interceptors>
        <!--如果只配置此bean标签则拦截所有请求，
        使用此方式不需要给拦截器类加上注解@Component-->
        <!--        <bean class="com.zhou.mvc.interceptor.FirstInterceptor"></bean>-->
        <!--如果只配置此ref标签则拦截所有请求，
        使用此方式需要给拦截器类加上注解@Component-->
        <!--        <ref bean="firstInterceptor"></ref>-->
        <!--配置只拦截发送给此控制器类的请求，需要先将控制器-->
        <mvc:interceptor>
            <!--，设置需要拦截的请求，
            /*代表拦截所有请求(只有一层目录匹配)，
            /**代表拦截所有请求(多层目录也可匹配)-->
            <mvc:mapping path="/**"/>
            <!--设置不需要拦截的请求，/代表不拦截路径为/的请求-->
            <mvc:exclude-mapping path="/"/>
            <mvc:exclude-mapping path="/testExceptionHandler"/>
            <!--指定拦截器类-->
            <bean class="com.zhou.mvc.interceptor.FirstInterceptor"></bean>
        </mvc:interceptor>
    </mvc:interceptors>

    <!--视图控制器,使用此标签会使控制器方法中所有请求映射全部失效-->
    <mvc:view-controller path="/" view-name="index"></mvc:view-controller>
    <mvc:view-controller path="/file" view-name="file"></mvc:view-controller>

    <!--开启MVC的注解驱动，解除使用了试图控制器导致的控制器方法中请求映射失效，配合default-servlet-handler访问控制器映射的方法-->
    <mvc:annotation-driven/>

    <!--开启对静态资源的访问(开启默认的servlet),如果存在DispatcherServlet处理不了的请求，
    则交给Tomcat中配置的默认servlet处理；需要配合<mvc:annotation-driven/>
    开启MVC的注解驱动配合使用，否则就无法访问控制器中映射的方法-->
    <mvc:default-servlet-handler/>

    <!--配置Thymeleaf视图解析器    -->
    <bean id="viewResolver" class="org.thymeleaf.spring5.view.ThymeleafViewResolver">
        <!--设置试图解析器的优先级(可以使用多个视图解析器-->
        <property name="order" value="1"/>
        <property name="characterEncoding" value="UTF-8"/>
        <property name="templateEngine">
            <bean class="org.thymeleaf.spring5.SpringTemplateEngine">
                <property name="templateResolver">
                    <bean class="org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver">
                        <!--  视图前缀-->
                        <property name="prefix" value="/WEB-INF/templates/"/>
                        <!--  视图后缀-->
                        <property name="suffix" value=".html"/>
                        <!--  页面模板 -->
                        <property name="templateMode" value="HTML5"/>
                        <property name="characterEncoding" value="UTF-8"/>
                    </bean>
                </property>
            </bean>
        </property>
    </bean>

    <!--配置文件上传解析器，将上传的文件封装为MultipartFile-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"></bean>
    <!-- 配置异常处理器-->
    <!--    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">-->
    <!--        <property name="exceptionMappings">-->
    <!--            <props>-->
    <!--                &lt;!&ndash;key为配置的对应异常，error为捕获到异常后跳转的视图名称&ndash;&gt;-->
    <!--                <prop key="java.lang.ArithmeticException">error</prop>-->
    <!--            </props>-->
    <!--        </property>-->
    <!--        &lt;!&ndash;显示错误信息，默认保存在请求域中,value值在前端为获取错误信息的key&ndash;&gt;-->
    <!--        <property name="exceptionAttribute" value="ex"></property>-->
    <!--    </bean>-->
</beans>